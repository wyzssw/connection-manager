<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
             http://www.springframework.org/schema/context
             http://www.springframework.org/schema/context/spring-context-3.0.xsd
             http://www.springframework.org/schema/task
             http://www.springframework.org/schema/task/spring-task-3.1.xsd"
     >



	<!-- 开启基于注解的配置 -->
	<import resource="classpath:/spring/cache.xml" />
	<import resource="classpath:/spring/cache_toutiao.xml" />
	<context:annotation-config />
	<context:component-scan base-package="com.wap.sohu.recom" />

	<!-- spring task managerment  -->
	<task:annotation-driven executor="asynExecutor"  scheduler="updateScheduler"/>
    <task:scheduler id="updateScheduler" pool-size="3" />
	<!-- 溢出就打日志通知我们  -->
    <task:executor id="asynExecutor" pool-size="15" queue-capacity="20000" rejection-policy="ABORT"/>

	<bean id="annotationHandlerMapping" class="com.wap.sohu.recom.urlmapping.AnnotationHandlerMapping" ></bean>

    <!--  使用自己的占位符后置处理器，方便开发环境、线上环境切换   -->
	<bean id="propertyConfigurer" class="com.wap.sohu.recom.environment.BeanPropertyholderConfigurer"  />


	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	      <property name="basenames">
	         <list merge="true">
	            <value>message</value>
	            <value>channel2cat</value>
	         </list>
	      </property>
	</bean>

	<bean id="abstractDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.connection.driver}" />
		<property name="username"  value="${jdbc.connection.username}" />
		<property name="password"  value="${jdbc.connection.password}" />
		<property name="maxActive" value="50" />
		<property name="initialSize" value="0" />
	        <property name="maxWait" value="60000" />
	        <property name="maxIdle" value="8" />
	        <property name="minIdle" value="1" />
	    <property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle"   value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="connectionProperties" value="${jdbc.connection.url.conn_properties}" />
	</bean>

	<bean id="dataSourcePics" parent="abstractDataSource">
		<property name="url"       value="${jdbc.connection.url.pics}" />
    </bean>

    <bean id="dataSourceMpaperCms2" parent="abstractDataSource">
		<property name="url"       value="${jdbc.connection.url.mpaper_cms2}" />
    </bean>

     <bean id="dataSourceMpaperNewSlave" parent="abstractDataSource">
		<property name="url"       value="${jdbc.connection.url.mpaper_new_slave}" />
	 </bean>

	 <bean id="dataSourceSmcsubscribeSlave" parent="abstractDataSource">
		<property name="url"       value="${jdbc.connection.url.smc_subscribe_slave}" />
	 </bean>

	  <bean id="dataSourceSmcSociality" parent="abstractDataSource">
		<property name="url"       value="${jdbc.connection.url.smc_sociality}" />
    </bean>
  
       <bean id="dataSourceMpaperCms2Slave" parent="abstractDataSource">
		<property name="url"       value="${jdbc.connection.url.mpaper_cms2_slave}" />
    </bean>


	 <bean id="jdbcTemplatePics" class="org.springframework.jdbc.core.JdbcTemplate"
	    p:dataSource-ref="dataSourcePics" />

	 <bean id="jdbcTemplateMpaperCms2" class="org.springframework.jdbc.core.JdbcTemplate"
	    p:dataSource-ref="dataSourceMpaperCms2" />

	 <bean id="jdbcTemplateMpaperNewSlave" class="org.springframework.jdbc.core.JdbcTemplate"
	    p:dataSource-ref="dataSourceMpaperNewSlave" />

	 <bean id="jdbcTemplateSmcsubscribeSlave" class="org.springframework.jdbc.core.JdbcTemplate"
	    p:dataSource-ref="dataSourceSmcsubscribeSlave" />

	 <bean id="jdbcTemplateSmcSociality" class="org.springframework.jdbc.core.JdbcTemplate"
	    p:dataSource-ref="dataSourceSmcSociality" />
    
        <bean id="jdbcTemplateMpaperCms2Slave"      class="org.springframework.jdbc.core.JdbcTemplate"
	    p:dataSource-ref="dataSourceMpaperCms2Slave" />


	 <!--
	 <bean id="msgPublisherManager" class="com.wap.sohu.recom.message.MsgPublisherManager" init-method="initMsgQueue">
	   <property name="host" value="${rabbitmq_host}"/>
	   <property name="port" value="5672"/>
	   <property name="queueNameSet" >
	      <set>
	         <value>ug_</value>
	      </set>
	   </property>
	 </bean>
	-->
	<bean id="edbTemplate" class="com.wap.sohu.recom.elephantdb.connector.EdbTemplate"
		p:edbConnectionFactory-ref="edbConnectionFactory" />

     <bean id="edbConnectionFactory" class="com.wap.sohu.recom.elephantdb.connector.EdbConnectionFactory"
		p:host="${edb_host}"
		p:port="${edb_port}"
		p:poolConfig-ref="edbPoolConfig"
		/>

    <bean id="edbPoolConfig" class="com.wap.sohu.recom.elephantdb.connector.EdbPoolConfig"
        p:maxActive="50"
        p:maxIdle="20"
        p:maxWait="60000"
        p:minIdle="1"
        p:minEvictableIdleTimeMillis="300000"
        p:timeBetweenEvictionRunsMillis="300000"
    />

	<bean id="msgPublisherManager" class="com.wap.sohu.recom.message.MsgPublisherManager" init-method="initMsgQueue">
		<property name="host" value="${rabbitmq_host}"/>
		<property name="port" value="${rabbitmq_port}"/>
		<property name="queueNameSet">
			<set>
				<value type="com.wap.sohu.recom.message.MsgQueueName">LATLNG</value>
				<value type="com.wap.sohu.recom.message.MsgQueueName">CELLID</value>
			</set>
		</property>
	</bean>

   <bean id="httpClient" class="org.apache.http.impl.client.DefaultHttpClient" >
         <constructor-arg name="conman" ref="clientConnectionManager" />
   </bean>

   <bean id="clientConnectionManager" class="org.apache.http.impl.conn.PoolingClientConnectionManager"
         p:maxTotal="90"
         p:defaultMaxPerRoute="50"/>


	<bean id="userDao" class="com.wap.sohu.recom.dao.UserDao">
		<property name="shards" value="${user_table_shards}" />
	</bean>

	<bean id="toutiaoLock" class="com.wap.sohu.recom.core.redis.lock.DistributedLock"
	   p:stringRedisTemplate-ref="stringRedisTemplateToutiao"
	   p:lockTimeOut="${toutiao_locktimeout}"
	   p:perSleep="${toutiao_persleep}"
	 />

    <bean id="mchannelLock" class="com.wap.sohu.recom.core.redis.lock.DistributedLock"
	   p:stringRedisTemplate-ref="stringRedisTemplateMChannel"
	   p:lockTimeOut="${mchannel_locktimeout}"
	   p:perSleep="${mchannel_persleep}"
	 />

	  <bean id="taoNewsLock" class="com.wap.sohu.recom.core.redis.lock.DistributedLock"
	   p:stringRedisTemplate-ref="stringRedisTemplateToutiao"
	   p:lockTimeOut="${taonews_locktimeout}"
	   p:perSleep="${taonews_persleep}"
	 />

	<bean id="registerMap" class="java.util.HashMap">
		<constructor-arg>
			<map key-type="java.lang.String" value-type="com.wap.sohu.recom.service.data.ChannelNewsDataService">
				<entry key="channel_1" value-ref="mainChannelDataService"></entry>
				<entry key="channel_4" value-ref="financeChannelNewsDataService"></entry>
			</map>
		</constructor-arg>
	</bean>
	</beans>



