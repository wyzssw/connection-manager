<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
             http://www.springframework.org/schema/context
             http://www.springframework.org/schema/context/spring-context-3.0.xsd
             http://www.springframework.org/schema/util
             http://www.springframework.org/schema/util/spring-util-3.1.xsd"
	default-lazy-init="true">


    <!-- 后台推荐基础数据库  -->
    <bean id="connectionFactoryBase" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${recom_redis_host}"
		p:port="${recom_redis_port}"
		p:poolConfig-ref="poolConfigBase"
		p:database="0"
		p:timeout="3000"
		/>


	<!-- 组图推荐数据库  -->
	<bean id="connectionFactoryRecom" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${recom_redis_host}"
		p:port="${recom_redis_port}"
		p:poolConfig-ref="poolConfigRecom"
		p:database="2"
		p:timeout="3000"
		/>


    <bean id="poolConfigBase" class="redis.clients.jedis.JedisPoolConfig"
        p:maxActive="90"
        p:maxIdle="10"
        p:maxWait="60000"
        p:minIdle="7"
    />


    <bean id="poolConfigRecom" class="redis.clients.jedis.JedisPoolConfig"
        p:maxActive="90"
        p:maxIdle="5"
        p:maxWait="60000"
        p:minIdle="4"
    />



	<bean id="redisTemplateBase" class="com.wap.sohu.recom.core.redis.StringRedisTemplateExt"
		p:connection-factory-ref="connectionFactoryBase"/>

    <bean id="redisTemplateRecom" class="com.wap.sohu.recom.core.redis.StringRedisTemplateExt"
		p:connection-factory-ref="connectionFactoryRecom"/>



    <!-- 分布式redis用户相关数据  -->
    <bean id="shardedRedisTemplateUser" class="com.wap.sohu.recom.core.redis.StringRedisTemplateExt" >
       <property name="connectionFactory">
           <bean class="com.wap.sohu.recom.core.redis.ShardedJedisConnectionFactory"
              p:shardedPoolConfig-ref="shardedPoolConfigUser"
              p:shards-ref="shardListUser" />
       </property>
    </bean>

    <!-- 分布式redis推荐数据、缓存数据、基础数据  -->
    <bean id="shardedRedisTemplateRecom" class="com.wap.sohu.recom.core.redis.StringRedisTemplateExt" >
       <property name="connectionFactory">
           <bean class="com.wap.sohu.recom.core.redis.ShardedJedisConnectionFactory"
              p:shardedPoolConfig-ref="shardedPoolConfigRecom"
              p:shards-ref="shardListRecom" />
       </property>
    </bean>

	<!-- distributed redis service -->
    <bean id="shardedRedisTemplateLbs" class="com.wap.sohu.recom.core.redis.StringRedisTemplateExt" >
       <property name="connectionFactory">
           <bean class="com.wap.sohu.recom.core.redis.ShardedJedisConnectionFactory"
              p:shardedPoolConfig-ref="shardedPoolConfigLBS"
              p:shards-ref="shardListLBS" />
       </property>
    </bean>

	<util:list id="shardListUser" list-class="java.util.ArrayList">
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${recom_redis_distributed_host_user1}"/>
	    <constructor-arg name="port" value="${recom_redis_distributed_port_user}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="user1"/>
	  </bean>
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${recom_redis_distributed_host_user2}"/>
	    <constructor-arg name="port" value="${recom_redis_distributed_port_user}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="user2"/>
	  </bean>
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${recom_redis_distributed_host_user3}"/>
	    <constructor-arg name="port" value="${recom_redis_distributed_port_user}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="user3"/>
	  </bean>
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${recom_redis_distributed_host_user4}"/>
	    <constructor-arg name="port" value="${recom_redis_distributed_port_user}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="user4"/>
	  </bean>
	</util:list>

	<util:list id="shardListRecom" list-class="java.util.ArrayList">
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${recom_redis_distributed_host_recom1}"/>
	    <constructor-arg name="port" value="${recom_redis_distributed_port_recom}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="recom1"/>
	  </bean>
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${recom_redis_distributed_host_recom2}"/>
	    <constructor-arg name="port" value="${recom_redis_distributed_port_recom}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="recom2"/>
	  </bean>
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${recom_redis_distributed_host_recom3}"/>
	    <constructor-arg name="port" value="${recom_redis_distributed_port_recom}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="recom3"/>
	  </bean>
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${recom_redis_distributed_host_recom4}"/>
	    <constructor-arg name="port" value="${recom_redis_distributed_port_recom}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="recom4"/>
	  </bean>
	</util:list>

	<util:list id="shardListLBS" list-class="java.util.ArrayList">
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${lbs_redis_distributed_host_user1}"/>
	    <constructor-arg name="port" value="${lbs_redis_distributed_port_user}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="user1"/>
	  </bean>
	  <bean class="redis.clients.jedis.JedisShardInfo" >
	    <constructor-arg name="host" value="${lbs_redis_distributed_host_user2}"/>
	    <constructor-arg name="port" value="${lbs_redis_distributed_port_user}"/>
	    <constructor-arg name="timeout" value="3000"/>
	    <constructor-arg name="name" value="user2"/>
	  </bean>
	</util:list>

	<bean id="shardedPoolConfigLBS" class="redis.clients.jedis.JedisPoolConfig"
        p:maxActive="90"
        p:maxIdle="30"
        p:maxWait="60000"
        p:minIdle="7"
        p:minEvictableIdleTimeMillis="300000"
        p:timeBetweenEvictionRunsMillis="300000"
    />

	<!-- 不光new io线程，还有异步线程  -->
	<bean id="shardedPoolConfigUser" class="redis.clients.jedis.JedisPoolConfig"
        p:maxActive="90"
        p:maxIdle="30"
        p:maxWait="60000"
        p:minIdle="7"
        p:minEvictableIdleTimeMillis="300000"
        p:timeBetweenEvictionRunsMillis="300000"
    />

	<bean id="shardedPoolConfigRecom" class="redis.clients.jedis.JedisPoolConfig"
        p:maxActive="90"
        p:maxIdle="30"
        p:maxWait="60000"
        p:minIdle="7"
        p:minEvictableIdleTimeMillis="300000"
        p:timeBetweenEvictionRunsMillis="300000"
    />

   <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean">
		<property name="servers" value="${recom_memcached_address}" />
		<property name="transcoder">
			<bean class="net.spy.memcached.transcoders.SerializingTranscoder"/>
		</property>
		<property name="opTimeout" value="5000" />
		<property name="timeoutExceptionThreshold" value="1998" />
		<property name="hashAlg" >
			<value type="net.spy.memcached.DefaultHashAlgorithm">KETAMA_HASH</value>
		</property>
		<property name="locatorType" value="CONSISTENT" />
		<property name="failureMode" value="Redistribute" />
		<property name="useNagleAlgorithm" value="false" />
	</bean>
</beans>